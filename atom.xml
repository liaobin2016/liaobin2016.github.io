<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Liaobin&#39;s BLog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://liaobin2016.github.io/"/>
  <updated>2017-03-08T13:23:54.143Z</updated>
  <id>http://liaobin2016.github.io/</id>
  
  <author>
    <name>Liaobin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>软件架构阅读一</title>
    <link href="http://liaobin2016.github.io/2017/03/08/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E9%98%85%E8%AF%BB%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://liaobin2016.github.io/2017/03/08/软件架构阅读（一）/</id>
    <published>2017-03-08T13:17:13.070Z</published>
    <updated>2017-03-08T13:23:54.143Z</updated>
    
    <content type="html">&lt;h2 id=&quot;架构定义&quot;&gt;&lt;a href=&quot;#架构定义&quot; class=&quot;headerlink&quot; title=&quot;架构定义&quot;&gt;&lt;/a&gt;架构定义&lt;/h2&gt;&lt;p&gt;架构=组件+交互&lt;/p&gt;
&lt;p&gt;架构=重要决策集&lt;/p&gt;
&lt;h2 id=&quot;子系统&quot;&gt;&lt;a href=&quot;#子系统&quot; class=&quot;headerlink&quot; title=&quot;子系统&quot;&gt;&lt;/a&gt;子系统&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;关注分离之道&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;通过职责划分来分离关注点（展现层、业务层、数据层）&lt;/li&gt;
&lt;li&gt;通过通用型分离关注点（技术通用、领域通用、特定应用）&lt;/li&gt;
&lt;li&gt;根据不同粒度级别分离关注点（子系统、模块、类）&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;框架与软件架构&lt;br&gt;框架是通过某种回调机制进行扩展的软件系统或子系统的半成品。&lt;br&gt;某种回调机制：c语言通过函数指针；面向对象使用抽象；&lt;br&gt;框架是软件、是半成品。&lt;br&gt;框架可分成基础设施框架、中间件框架、应用型框架。&lt;br&gt;另外一种分法：业务框架、技术框架。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如何实现框架中的扩展点：&lt;br&gt;c语言：函数指针；面向对象：抽象；其他：约定的数据格式。&lt;/p&gt;
&lt;p&gt;软件架构的作用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;上承业务目标&lt;/li&gt;
&lt;li&gt;下接技术决策&lt;/li&gt;
&lt;li&gt;控制复杂性&lt;/li&gt;
&lt;li&gt;组装开发&lt;/li&gt;
&lt;li&gt;利于迭代开发和增量交付&lt;/li&gt;
&lt;li&gt;提高质量&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;软件架构视图&quot;&gt;&lt;a href=&quot;#软件架构视图&quot; class=&quot;headerlink&quot; title=&quot;软件架构视图&quot;&gt;&lt;/a&gt;软件架构视图&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;架构师要为客户负责，满足他们的业务目标和约束条件。&lt;/li&gt;
&lt;li&gt;架构师要为用户负责，使他们关心的功能性需求和运行期质量需求得到满足。&lt;/li&gt;
&lt;li&gt;架构师必须顾及处于协议分工“下游”的开发人员&lt;/li&gt;
&lt;li&gt;架构师还必须考虑周边的管理人员，为他们进行分工管理、协调控制、评估监控等提供清晰的基础。&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&quot;5种视图&quot;&gt;&lt;a href=&quot;#5种视图&quot; class=&quot;headerlink&quot; title=&quot;5种视图&quot;&gt;&lt;/a&gt;5种视图&lt;/h3&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;逻辑架构 关注点是行为和职责的划分。&lt;/li&gt;
&lt;li&gt;开发架构 着重考虑开发期质量属性，比如可扩展性、可移植性、可重用性、可测试性、易理解性。&lt;/li&gt;
&lt;li&gt;运行架构 关注运行期质量属性，并发与同步问题，比如性能、可伸缩性、持续可用性、安全性、&lt;/li&gt;
&lt;li&gt;物理架构 着重考虑安装和部署需求。&lt;/li&gt;
&lt;li&gt;数据架构&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;从概念性架构到实际架构，先设计概念性架构，构思关键问题的解决策略。再进行实际架构的设计，保证为开发提供足够的指导和限制。&lt;/p&gt;
&lt;h2 id=&quot;如何进行成功的架构设计&quot;&gt;&lt;a href=&quot;#如何进行成功的架构设计&quot; class=&quot;headerlink&quot; title=&quot;如何进行成功的架构设计&quot;&gt;&lt;/a&gt;如何进行成功的架构设计&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;全面认识需求&lt;/li&gt;
&lt;li&gt;关键需求决定架构 我们一般在项目的业务目标和核心需求达成共识之后就开始架构设计。&lt;/li&gt;
&lt;li&gt;多视图探寻架构 分而治之&lt;/li&gt;
&lt;li&gt;尽早验证架构&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;软件架构要到什么程度&quot;&gt;&lt;a href=&quot;#软件架构要到什么程度&quot; class=&quot;headerlink&quot; title=&quot;软件架构要到什么程度&quot;&gt;&lt;/a&gt;软件架构要到什么程度&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;分而治之。&lt;br&gt;按问题深度分而治之（比如接口与实现分离）；&lt;br&gt;按问题广度分而治之（MVC）；&lt;/li&gt;
&lt;li&gt;架构设计和详细设计分离。&lt;/li&gt;
&lt;li&gt;软件架构是团队开发的基础。团队开发具体技术复杂性和管理复杂性双重困难。不同的模块分给不同的小组去开发，而软件架构方案在这些小组中扮演“桥梁”和“合作契约”的作用，提供足够的的开发指导和限制。&lt;/li&gt;
&lt;li&gt;软件架构要到什么程度。由于项目的不同、开发团队情况的不同，软件架构的设计程度会有不同；软件架构要为开发人员提供足够的的指导和限制。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;高来高去式软件架构的特征&quot;&gt;&lt;a href=&quot;#高来高去式软件架构的特征&quot; class=&quot;headerlink&quot; title=&quot;高来高去式软件架构的特征&quot;&gt;&lt;/a&gt;高来高去式软件架构的特征&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;缺失重要架构视图&lt;/li&gt;
&lt;li&gt;浅尝辄止，不够深入。架构设计过于笼统，停留在概念性架构设计层面。&lt;/li&gt;
&lt;li&gt;名不符实的分层架构。仅用分层来指责划分，而并没有规划层次之间的交互接口和交互机制的情况。（举例；公司架构图很清晰，依然管理混乱）&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;软件架构设计过程&quot;&gt;&lt;a href=&quot;#软件架构设计过程&quot; class=&quot;headerlink&quot; title=&quot;软件架构设计过程&quot;&gt;&lt;/a&gt;软件架构设计过程&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;概念化设计阶段 主要针对项目目标、业务范围、主要功能、成功要素等进行构思并达成一致。小型的可以以《业务目标列表》；大型的项目以《愿景与范围文档》《市场需求文档》《项目立项书》&lt;/li&gt;
&lt;li&gt;分析阶段 明确需求，以《软件需求规格说明书》的形式记录。包含软件系统必须完成的功能，又包含应满足那些质量属性，还需明确对设计有哪些约束性需求。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;需求分析&lt;/li&gt;
&lt;li&gt;领域建模&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;架构设计阶段 软件架构从系统如何规划、如何开发、如何运行等角度揭示了软件系统的结构和机制，为后面的具体开发提供足够的指导和限制。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;概念性架构，包含确认关键需求；概念性架构设计&lt;/li&gt;
&lt;li&gt;实际结构，包含细化架构；验证架构&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;并行开发和测试阶段&lt;/li&gt;
&lt;li&gt;验收与交付阶段&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;架构定义&quot;&gt;&lt;a href=&quot;#架构定义&quot; class=&quot;headerlink&quot; title=&quot;架构定义&quot;&gt;&lt;/a&gt;架构定义&lt;/h2&gt;&lt;p&gt;架构=组件+交互&lt;/p&gt;
&lt;p&gt;架构=重要决策集&lt;/p&gt;
&lt;h2 id=&quot;子系统&quot;&gt;&lt;a href=&quot;#子系统&quot; class
    
    </summary>
    
      <category term="笔记" scheme="http://liaobin2016.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>遇见一位讲求方法的导师</title>
    <link href="http://liaobin2016.github.io/2016/05/01/huawei_Hierophant/"/>
    <id>http://liaobin2016.github.io/2016/05/01/huawei_Hierophant/</id>
    <published>2016-05-01T03:05:36.402Z</published>
    <updated>2016-05-01T03:15:41.809Z</updated>
    
    <content type="html">&lt;h2 id=&quot;幸运&quot;&gt;&lt;a href=&quot;#幸运&quot; class=&quot;headerlink&quot; title=&quot;幸运&quot;&gt;&lt;/a&gt;幸运&lt;/h2&gt;&lt;p&gt;在上一家公司，很幸运地遇到了一位好导师，我们都叫他宝哥。他教导我们很上心，且很有耐心。很多复杂的问题在他独到的讲解中，却变得很清晰简单。我觉得吧，这是因为他是一个讲求方法的人。&lt;/p&gt;
&lt;p&gt;现在回想觉得当时没有向导师多请教学习。不过仍然有很多，在我以后的工作中，起了很重要的作用。比如以下要介绍的：&lt;/p&gt;
&lt;h2 id=&quot;1-善用隐喻&quot;&gt;&lt;a href=&quot;#1-善用隐喻&quot; class=&quot;headerlink&quot; title=&quot;1.善用隐喻&quot;&gt;&lt;/a&gt;1.善用隐喻&lt;/h2&gt;&lt;p&gt;这个是宝哥经常说起的，他经常给我们结合生活中例子，来引导我们去思考软件开发中遇到的问题。&lt;/p&gt;
&lt;p&gt;比如讲到cache，就会联想到水库、水塘。&lt;br&gt;讲到数据包传输，就会联想到坐车。&lt;/p&gt;
&lt;p&gt;其实要说的就是软件工程要解决的很多问题，其实在生活中能够找到相似的例子，并且是已经很成熟的方案来解决。&lt;br&gt;我们可以借鉴生活上实实在在的事情，解决我们软件工程的问题。社会工程的历史远比我们软件工程历史长得多。多少先辈人的心血和经验，值得我们借鉴。所以我们要做的就是当一个生活的有心人，认真去观察周围，体会它们的用意。说不定以后在以后的工作中，脑袋一冒光，得到意外惊喜。&lt;/p&gt;
&lt;p&gt;这方面我还是做的很差，以后需要多用用这个技能。&lt;/p&gt;
&lt;h2 id=&quot;2-正本清源&quot;&gt;&lt;a href=&quot;#2-正本清源&quot; class=&quot;headerlink&quot; title=&quot;2.正本清源&quot;&gt;&lt;/a&gt;2.正本清源&lt;/h2&gt;&lt;p&gt;这里有两层意思：&lt;/p&gt;
&lt;p&gt;一; 现在进入了一个知识快餐的时代。遇到问题就百度google，复制，粘贴，问题就解决了。不会事后总结的，基本上隔个把月差不多就会忘了。总结了的，如果不去研究真相的背后，遇到类似问题依然还是不会，毕竟没掌握原理，知其然，不知其所以然。我有时也会有这个感觉。所以在解决问题后，带着问题去找一本相关的系统化一点的书看看。坚持最重要。&lt;/p&gt;
&lt;p&gt;可以看看这篇文章。&lt;br&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzA5OTk3Mjc2Mg==&amp;amp;mid=402626515&amp;amp;idx=1&amp;amp;sn=cd50e72154e0653b717a4d150113e65d&amp;amp;scene=2&amp;amp;srcid=0318ANk3Jy8K1nwxVDw9croS&amp;amp;from=timeline&amp;amp;isappinstalled=0#rd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;不坚持系统化学习，你会成为一个“碎人”！&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;二；在学习的道路上，最让人愉快的事情，莫过于有一本刚刚你需要的书。然而事实却不是如此，现在的书太多了，甚至说太乱了。&lt;br&gt;所以这里说的重点就是找书的原则，必须正本清源。最简单的方法就是找你身边的大牛推荐。后续也会推荐一些书籍。&lt;/p&gt;
&lt;h2 id=&quot;3-选择好的工具&quot;&gt;&lt;a href=&quot;#3-选择好的工具&quot; class=&quot;headerlink&quot; title=&quot;3.选择好的工具&quot;&gt;&lt;/a&gt;3.选择好的工具&lt;/h2&gt;&lt;p&gt;“工欲善其事，必先利其器”的道理都知道。&lt;/p&gt;
&lt;p&gt;我在上家公司从事的基于Linux环境下C编程，偏网络方向。导师他喜欢的工具有：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;source insight:阅读代码很方便的一个工具。&lt;/li&gt;
&lt;li&gt;wireshark: 抓包分析利器，能够精通这个工具的，对网络必然是精通的。&lt;/li&gt;
&lt;li&gt;beyond-compare:比较工具。可用作代码比较，数据比较。&lt;/li&gt;
&lt;li&gt;EA：画图工具&lt;br&gt;等等。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;他一直提倡我们有时间的话，去读读工具的帮助文档。一个好的工具，他的帮助文档也是写的相当好的。&lt;br&gt;他就是这么做的，我们一般都是用用工具的一些基本功能。但是导师他在工具帮助文档里发现了新的世界。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;比如wireshark的lua脚本，可以编写自己的私有协议解析脚本。让wireshark支持自己的协议是不是一件逼格很高的活，给项目带来的效率是杠杠的。有时间可以专门介绍一下。&lt;/li&gt;
&lt;li&gt;比如用source insight来写代码阅读记录。书签功能用到极致。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外一个用意就是，帮助文档确实写的好，对于我们编写项目文档有借鉴意义。&lt;/p&gt;
&lt;p&gt;当然了我们其实并没有很多时间去读工具文档，而且大部分都是英文文档。所以，他又教我们怎么去读。想想导师真的是尽心尽责，诲人不倦。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;浏览标题，大致过一下，有个印象。&lt;/li&gt;
&lt;li&gt;关键字搜搜。&lt;/li&gt;
&lt;li&gt;在阅读的时候，先看顺眼的。比如一篇文档中插入一小段代码，一幅图。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以了，当你喜欢一个工具的时候，就多了解它吧。&lt;/p&gt;
&lt;h2 id=&quot;4-善于总结&quot;&gt;&lt;a href=&quot;#4-善于总结&quot; class=&quot;headerlink&quot; title=&quot;4.善于总结&quot;&gt;&lt;/a&gt;4.善于总结&lt;/h2&gt;&lt;p&gt;这个就不用说了。大家都知道，但是能坚持做下来的，肯定不是很多。已经坚持下来的，想必已经有所收获，或者有所成就了吧。&lt;/p&gt;
&lt;p&gt;所以说，一句话，总结要坚持。&lt;/p&gt;
&lt;p&gt;我现在之所以写博客的原因也在于此。在上一家公司其实也写了很多，可是万恶的保密协议，所有东西都带不出来啊。好几年的积累，心都在滴血。&lt;br&gt;而且最近发现有些东西时间久了，的确容易忘记。所以蹭着还有些记忆，近期会再总结一些。&lt;/p&gt;
&lt;p&gt;当然最近也在研究新的东西，也需要总结一下。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;幸运&quot;&gt;&lt;a href=&quot;#幸运&quot; class=&quot;headerlink&quot; title=&quot;幸运&quot;&gt;&lt;/a&gt;幸运&lt;/h2&gt;&lt;p&gt;在上一家公司，很幸运地遇到了一位好导师，我们都叫他宝哥。他教导我们很上心，且很有耐心。很多复杂的问题在他独到的讲解中，却变得很清晰简单。我觉
    
    </summary>
    
      <category term="学习方法" scheme="http://liaobin2016.github.io/categories/%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/"/>
    
    
      <category term="隐喻" scheme="http://liaobin2016.github.io/tags/%E9%9A%90%E5%96%BB/"/>
    
  </entry>
  
  <entry>
    <title>最佳日志实践</title>
    <link href="http://liaobin2016.github.io/2016/04/23/log_best_practice/"/>
    <id>http://liaobin2016.github.io/2016/04/23/log_best_practice/</id>
    <published>2016-04-23T09:38:44.109Z</published>
    <updated>2016-04-26T15:00:48.220Z</updated>
    
    <content type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;日志用来记录用户操作、系统运行状态等，是一个系统的重要组成部分。然而由于日志并非系统核心功能，通常情况下并不受团队的重视。在出现问题需要通过日志来定位时，才发现日志还存在很多问题。&lt;/p&gt;
&lt;p&gt;日志记录的好坏直接关系到系统出现问题时定位的速度，同时可以通过对日志的观察和分析，提前发现系统可能的风险，避免线上事故的发生。&lt;/p&gt;
&lt;p&gt;我们在开发和运维NOS（网易对象存储，Netease Object Storage）的过程中，对整个系统的日志进行了分析优化，积累出一些经验，归纳如下。&lt;/p&gt;
&lt;h2 id=&quot;相关问题经验整理&quot;&gt;&lt;a href=&quot;#相关问题经验整理&quot; class=&quot;headerlink&quot; title=&quot;相关问题经验整理&quot;&gt;&lt;/a&gt;相关问题经验整理&lt;/h2&gt;&lt;h3 id=&quot;1-关于日志级别&quot;&gt;&lt;a href=&quot;#1-关于日志级别&quot; class=&quot;headerlink&quot; title=&quot;1. 关于日志级别&quot;&gt;&lt;/a&gt;1. 关于日志级别&lt;/h3&gt;&lt;p&gt;我们通常使用的日志库（如log4j等），将日志基本分为以下几类（从低到高）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;TRACE – The TRACE Level designates finer-grained informational events than the DEBUG&lt;/li&gt;
&lt;li&gt;DEBUG – The DEBUG Level designates fine-grained informational events that are most useful to debug an application.&lt;/li&gt;
&lt;li&gt;INFO – The INFO level designates informational messages that highlight the progress of the application at coarse-grained level.&lt;/li&gt;
&lt;li&gt;WARN – The WARN level designates potentially harmful situations.&lt;/li&gt;
&lt;li&gt;ERROR – The ERROR level designates error events that might still allow the application to continue running.&lt;/li&gt;
&lt;li&gt;FATAL – The FATAL level designates very severe error events that will presumably lead the application to abort.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;尽管log4j官方文档对各个日志级别进行了简单定义。然而在实践中，究竟哪些操作需要记入日志，哪种错误应该记为WARN级别，而哪种错误又为ERROR级别，还需要进行进一步讨论。&lt;/p&gt;
&lt;p&gt;关于该问题，在StackOverflow上有一个讨论贴进行过讨论。&lt;/p&gt;
&lt;p&gt;此处对贴子中的一些观点，加上我们在平时运维过程中遇到的相关问题进行归纳：&lt;/p&gt;
&lt;p&gt;一个项目各个log级别的定义应该是清楚明确的，是每个开发人员所遵循的；&lt;br&gt;即使是TRACE或者DEBUG级别的日志，也应该有一定的规范，要保证除了开发人员自己以外，包括测试人员和运维人员都可以方便地通过日志定位问题；&lt;/p&gt;
&lt;p&gt;对于日志级别的分类，有以下参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FATAL — 表示需要立即被处理的系统级错误。当该错误发生时，表示服务已经出现了某种程度的不可用，系统管理员需要立即介入。这属于最严重的日志级别，因此该日志级别必须慎用，如果这种级别的日志经常出现，则该日志也失去了意义。通常情况下，一个进程的生命周期中应该只记录一次FATAL级别的日志，即该进程遇到无法恢复的错误而退出时。当然，如果某个系统的子系统遇到了不可恢复的错误，那该子系统的调用方也可以记入FATAL级别日志，以便通过日志报警提醒系统管理员修复；&lt;/li&gt;
&lt;li&gt;ERROR — 该级别的错误也需要马上被处理，但是紧急程度要低于FATAL级别。当ERROR错误发生时，已经影响了用户的正常访问。从该意义上来说，实际上ERROR错误和FATAL错误对用户的影响是相当的。FATAL相当于服务已经挂了，而ERROR相当于好死不如赖活着，然而活着却无法提供正常的服务，只能不断地打印ERROR日志。特别需要注意的是，ERROR和FATAL都属于服务器自己的异常，是需要马上得到人工介入并处理的。而对于用户自己操作不当，如请求参数错误等等，是绝对不应该记为ERROR日志的；&lt;/li&gt;
&lt;li&gt;WARN — 该日志表示系统可能出现问题，也可能没有，这种情况如网络的波动等。对于那些目前还不是错误，然而不及时处理也会变为错误的情况，也可以记为WARN日志，例如一个存储系统的磁盘使用量超过阀值，或者系统中某个用户的存储配额快用完等等。对于WARN级别的日志，虽然不需要系统管理员马上处理，也是需要即使查看并处理的。因此此种级别的日志也不应太多，能不打WARN级别的日志，就尽量不要打；&lt;/li&gt;
&lt;li&gt;INFO — 该种日志记录系统的正常运行状态，例如某个子系统的初始化，某个请求的成功执行等等。通过查看INFO级别的日志，可以很快地对系统中出现的WARN,ERROR,FATAL错误进行定位。INFO日志不宜过多，通常情况下，INFO级别的日志应该不大于TRACE日志的10%；&lt;/li&gt;
&lt;li&gt;DEBUG or TRACE — 这两种日志具体的规范应该由项目组自己定义，该级别日志的主要作用是对系统每一步的运行状态进行精确的记录。通过该种日志，可以查看某一个操作每一步的执行过程，可以准确定位是何种操作，何种参数，何种顺序导致了某种错误的发生。可以保证在不重现错误的情况下，也可以通过DEBUG（或TRACE）级别的日志对问题进行诊断。需要注意的是，DEBUG日志也需要规范日志格式，应该保证除了记录日志的开发人员自己外，其他的如运维，测试人员等也可以通过DEBUG（或TRACE）日志来定位问题；&lt;h5 id=&quot;Rule-1：整个团队（包括运维人员）需要对日志级别有明确的规定，什么日志记入什么级别的日志，什么级别的错误出现要如何处理等&quot;&gt;&lt;a href=&quot;#Rule-1：整个团队（包括运维人员）需要对日志级别有明确的规定，什么日志记入什么级别的日志，什么级别的错误出现要如何处理等&quot; class=&quot;headerlink&quot; title=&quot;Rule 1：整个团队（包括运维人员）需要对日志级别有明确的规定，什么日志记入什么级别的日志，什么级别的错误出现要如何处理等&quot;&gt;&lt;/a&gt;&lt;em&gt;Rule 1：整个团队（包括运维人员）需要对日志级别有明确的规定，什么日志记入什么级别的日志，什么级别的错误出现要如何处理等&lt;/em&gt;&lt;/h5&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-对记录的日志要进行更新维护&quot;&gt;&lt;a href=&quot;#2-对记录的日志要进行更新维护&quot; class=&quot;headerlink&quot; title=&quot;2. 对记录的日志要进行更新维护&quot;&gt;&lt;/a&gt;2. 对记录的日志要进行更新维护&lt;/h3&gt;&lt;p&gt;由于DEBUG（或TRACE）级别的日志对于定位问题至关重要，因此该种日志记录是否完备且不冗余、格式是否规范等也需要花费大量精力来优化。此处有以下几个比较好的实践：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定义好整个团队记录DEBUG（或TRACE）日志的规范，保证每个开发记录的日志格式统一；&lt;/li&gt;
&lt;li&gt;整个团队（包括开发，运维和测试）定期对记录的日志内容进行Review；&lt;/li&gt;
&lt;li&gt;开发做运维，通过在查问题的过程来优化日志记录的方式；&lt;/li&gt;
&lt;li&gt;运维或测试在日志中发现的问题，都需要及时向开发人员反映；&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;Rule-2：需要定期对日志内容进行优化更新，目的就是通过日志快速准确的定位问题&quot;&gt;&lt;a href=&quot;#Rule-2：需要定期对日志内容进行优化更新，目的就是通过日志快速准确的定位问题&quot; class=&quot;headerlink&quot; title=&quot;Rule 2：需要定期对日志内容进行优化更新，目的就是通过日志快速准确的定位问题&quot;&gt;&lt;/a&gt;&lt;em&gt;Rule 2：需要定期对日志内容进行优化更新，目的就是通过日志快速准确的定位问题&lt;/em&gt;&lt;/h5&gt;&lt;h3 id=&quot;3-关于日志分类&quot;&gt;&lt;a href=&quot;#3-关于日志分类&quot; class=&quot;headerlink&quot; title=&quot;3. 关于日志分类&quot;&gt;&lt;/a&gt;3. 关于日志分类&lt;/h3&gt;&lt;p&gt;日志从功能来说，可分为诊断日志、统计日志、审计日志。&lt;/p&gt;
&lt;p&gt;诊断日志， 典型的有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;请求入口和出口&lt;/li&gt;
&lt;li&gt;外部服务调用和返回&lt;/li&gt;
&lt;li&gt;资源消耗操作: 打开文件等&lt;/li&gt;
&lt;li&gt;容错行为： 譬如云硬盘的副本修复操作&lt;/li&gt;
&lt;li&gt;程序异常： 譬如数据库无法连接&lt;/li&gt;
&lt;li&gt;后台操作：清理程序&lt;/li&gt;
&lt;li&gt;启动、关闭、配置加载&lt;/li&gt;
&lt;li&gt;抛出异常时，不记录日志&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;统计日志：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户访问统计&lt;/li&gt;
&lt;li&gt;计费日志（如记录用户使用的网络资源或磁盘占用，格式较为严格，便于统计）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;审计日志：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;管理操作&lt;/li&gt;
&lt;li&gt;将不同需求的日志记入到不同的日志文件中，可以方便相关问题（管理平台操作审计，用户操作计费等）的处理。针对每一种需求，需要对日志的格式，日志记录的内容等进行特别的记录。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;Rule-3：要明确不同日志的用途，对日志内容进行分类&quot;&gt;&lt;a href=&quot;#Rule-3：要明确不同日志的用途，对日志内容进行分类&quot; class=&quot;headerlink&quot; title=&quot;Rule 3：要明确不同日志的用途，对日志内容进行分类&quot;&gt;&lt;/a&gt;&lt;em&gt;Rule 3：要明确不同日志的用途，对日志内容进行分类&lt;/em&gt;&lt;/h5&gt;&lt;h3 id=&quot;4-日志中不要记录无用信息&quot;&gt;&lt;a href=&quot;#4-日志中不要记录无用信息&quot; class=&quot;headerlink&quot; title=&quot;4. 日志中不要记录无用信息&quot;&gt;&lt;/a&gt;4. 日志中不要记录无用信息&lt;/h3&gt;&lt;p&gt;在很多应用中，用户都需要通过Fuse方式来挂载使用NOS。&lt;/p&gt;
&lt;p&gt;POSIX标准中文件系统接口不允许文件 /a 与目录 /a/ 同时存在，而NOS作为对象存储系统，/a 和 /a/ 是不同的对象，是能够同时存在的，一般地，NOS 中我们会规定 /a/ 是目录，/a 是文件，目录对象大小为0。&lt;/p&gt;
&lt;p&gt;POSIX标准对文件的getattr操作，无论是 /a 还是 /a/，对应的请求都是 /a。为了避免遗漏，需分别向 NOS 请求 HeadObject(“/a“)和 HeadObject(“/a/“)。如果命中/a，说明 /a 是一个文件，不用再请求 getattr(“/a/“)。&lt;/p&gt;
&lt;p&gt;因此当用户访问 &lt;em&gt;/a/b/c.txt&lt;/em&gt; 时，实际上向NOS发送了以下请求：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;HeadObject(“/a”)
HeadObject(“/a/”)
HeadObject(“/a/b”)
HeadObject(“/a/b/”)
HeadObject(“/a/b/c.txt”)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;对于上面的请求，实际上HeadObject(“/a”)和HeadObject(“/a/b”)都会返回NoSuchKey错误，而Fuse正是该错误来判断该文件不存在，而可能是个目录的。&lt;/p&gt;
&lt;p&gt;然而对于NOS来说，这将导致产生大量无意义的NoSuchKey日志（整个日志文件的80%都是该错误日志）。这些日志对于开发人员进行日志观察，运维人员定位问题，日志监控等都造成了困难。&lt;/p&gt;
&lt;h5 id=&quot;Rule-4-绝不要打印没有用的日志，防止无用日志淹没重要信息&quot;&gt;&lt;a href=&quot;#Rule-4-绝不要打印没有用的日志，防止无用日志淹没重要信息&quot; class=&quot;headerlink&quot; title=&quot;Rule 4: 绝不要打印没有用的日志，防止无用日志淹没重要信息&quot;&gt;&lt;/a&gt;&lt;em&gt;Rule 4: 绝不要打印没有用的日志，防止无用日志淹没重要信息&lt;/em&gt;&lt;/h5&gt;&lt;p&gt;解决办法：Fuse请求时，在Http头部加入 User-Agent 字段，当NOS发现请求是 Fuse发过来的且为HeadObject操作且为NoSuchKey错误时，则不打印错误日志。&lt;/p&gt;
&lt;h3 id=&quot;5-日志记录信息要完整&quot;&gt;&lt;a href=&quot;#5-日志记录信息要完整&quot; class=&quot;headerlink&quot; title=&quot;5. 日志记录信息要完整&quot;&gt;&lt;/a&gt;5. 日志记录信息要完整&lt;/h3&gt;&lt;p&gt;问题描述：&lt;/p&gt;
&lt;p&gt;NOS提供分块上传的接口，用户可以通过以下的调用序列，来实现一次分块上传的流程：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;InitMultiUpload（生成一个UploadID）
UploadPart
UploadPart
 ……
UploadPart
CompleteMultiUpload（AbortMultiUpload）
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;之前在某个产品上线初期，由于其开发人员对NOS的熟悉程度不够等原因。出现过如下问题：客户端常常会收到NoSuchUpload的错误。该错误出现的原因是，用户在未调用InitMultiUpload之前，或者在调用了CompleteMultiUpload（AbortMultiUpload）之后再次调用UploadPart。&lt;/p&gt;
&lt;p&gt;然而当我们查日志，希望可以看到该UploadPart请求对哪个UploadID进行操作，该UploadID又对应哪些操作时，却发现我们的日志中没有记录UploadPart请求对应的UploadID。&lt;/p&gt;
&lt;p&gt;类似的问题还有很多，很多针对特定请求的日志缺失，导致很多问题无法定位。&lt;/p&gt;
&lt;p&gt;因此，需要进一步对日志中需要记录哪些内容进行规定，此处推荐的需要在日志中记录的内容有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在系统启动或初始化时记录重要的系统初始化参数&lt;/li&gt;
&lt;li&gt;记录系统运行过程中的所有的错误&lt;/li&gt;
&lt;li&gt;记录系统运行过程中的所有的警告&lt;/li&gt;
&lt;li&gt;在持久化数据修改时记录修改前和修改后的值&lt;/li&gt;
&lt;li&gt;记录系统各主要模块之间的请求和响应（如在NOS中的视频处理模块在接收到请求和发送应答时，或者向客户端发送回调请求时）&lt;/li&gt;
&lt;li&gt;重要的状态变化（如NOS中对系统白名单的修改等）&lt;/li&gt;
&lt;li&gt;系统中一些长期执行的任务的执行进度&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而不推荐记录日志的内容有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;函数入口信息 —— 除非该函数入口表示了一个重要事件的开始，或者将该信息记入DEBUG级别日志&lt;/li&gt;
&lt;li&gt;文件内容或者一大段消息的内容 —— 如果实在需要记录，则可以截取其中一些重要的信息来记入日志&lt;/li&gt;
&lt;li&gt;“良性”错误 —— 有时候虽然出现了错误，然而错误处理的流程可以正确解决这种情况，例如插入数据库时有重复的记录，尽管是个错误，然而错误处理流程可以对这种情况进行处理&lt;h5 id=&quot;Rule-5：日志信息要准确全面，能做到仅凭日志就可以定位问题&quot;&gt;&lt;a href=&quot;#Rule-5：日志信息要准确全面，能做到仅凭日志就可以定位问题&quot; class=&quot;headerlink&quot; title=&quot;Rule 5：日志信息要准确全面，能做到仅凭日志就可以定位问题&quot;&gt;&lt;/a&gt;&lt;em&gt;Rule 5：日志信息要准确全面，能做到仅凭日志就可以定位问题&lt;/em&gt;&lt;/h5&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;解决办法：整理所有的请求处理流程，针对每一个操作（去重，分块上传……）打印特定的日志。&lt;/p&gt;
&lt;h3 id=&quot;6-测试的日志&quot;&gt;&lt;a href=&quot;#6-测试的日志&quot; class=&quot;headerlink&quot; title=&quot;6. 测试的日志&quot;&gt;&lt;/a&gt;6. 测试的日志&lt;/h3&gt;&lt;p&gt;测试代码（单元测试，接口测试……）的日志同样重要。特别是，当一个测试失败时，可以通过日志很快确定是测试代码有问题，还是系统出现了故障，如果做不到这一点，那就需要优化测试的日志了。&lt;/p&gt;
&lt;p&gt;测试日志应该包含以下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;测试执行的环境&lt;/li&gt;
&lt;li&gt;测试执行前的初始状态&lt;/li&gt;
&lt;li&gt;测试的详细步骤&lt;/li&gt;
&lt;li&gt;测试和系统的交互信息&lt;/li&gt;
&lt;li&gt;测试期望的返回结果&lt;/li&gt;
&lt;li&gt;测试实际的返回结果&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;Rule-6：要以同样严格的要求对待测试程序的日志&quot;&gt;&lt;a href=&quot;#Rule-6：要以同样严格的要求对待测试程序的日志&quot; class=&quot;headerlink&quot; title=&quot;Rule 6：要以同样严格的要求对待测试程序的日志&quot;&gt;&lt;/a&gt;&lt;em&gt;Rule 6：要以同样严格的要求对待测试程序的日志&lt;/em&gt;&lt;/h5&gt;&lt;h3 id=&quot;7-从问题中完善日志&quot;&gt;&lt;a href=&quot;#7-从问题中完善日志&quot; class=&quot;headerlink&quot; title=&quot;7. 从问题中完善日志&quot;&gt;&lt;/a&gt;7. 从问题中完善日志&lt;/h3&gt;&lt;p&gt;在线上出现问题的时候，需要尽快发现问题并解决，而同时，需要借此机会好好思考一下当前系统的日志是否合理。需要考虑以下问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果定位问题花费了很长时间，那就说明系统日志还存在问题，需要进一步完善和优化&lt;/li&gt;
&lt;li&gt;需要思考是否可以通过优化日志，来提前预判该问题是否可能发生（如某种资源耗尽而导致的错误，可以对资源的使用情况进行记录）&lt;/li&gt;
&lt;li&gt;通过系统出现的问题来优化日志，应该是一项长期的实践，不断地从日志发现系统的问题，不断地从系统异常发现日志的问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;Rule-7：日志的优化是一件持续不断需要投入精力的事，需要不断从错误中学习&quot;&gt;&lt;a href=&quot;#Rule-7：日志的优化是一件持续不断需要投入精力的事，需要不断从错误中学习&quot; class=&quot;headerlink&quot; title=&quot;Rule 7：日志的优化是一件持续不断需要投入精力的事，需要不断从错误中学习&quot;&gt;&lt;/a&gt;&lt;em&gt;Rule 7：日志的优化是一件持续不断需要投入精力的事，需要不断从错误中学习&lt;/em&gt;&lt;/h5&gt;&lt;h3 id=&quot;8-关于RequestID&quot;&gt;&lt;a href=&quot;#8-关于RequestID&quot; class=&quot;headerlink&quot; title=&quot;8. 关于RequestID&quot;&gt;&lt;/a&gt;8. 关于RequestID&lt;/h3&gt;&lt;p&gt;RequestID的生成：&lt;br&gt;如今NOS有8台机器，共40个tomcat对外提供服务。通常用户在请求出错的时候，我们都希望用户告诉我们请求的RequestID，以此我们可以确定请求是在哪台机器上进行处理的。&lt;/p&gt;
&lt;p&gt;NOS通过以下信息生成一个请求的RequestID：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;收到请求的时间
处理请求的服务器ip地址
随机数
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;因此我们可以通过一个简单的程序从RequestID中得到该请求的处理时间和处理请求的服务器地址，更方便的去查看日志：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./decode.sh 4b2c009a0a7800000142789f42b8ca96
Thu Nov 21 11:06:12 CST 2013
10.120.202.150
4b2c009a
&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&quot;Rule-8：在RequestID中尽量编码更多的信息&quot;&gt;&lt;a href=&quot;#Rule-8：在RequestID中尽量编码更多的信息&quot; class=&quot;headerlink&quot; title=&quot;Rule 8：在RequestID中尽量编码更多的信息&quot;&gt;&lt;/a&gt;&lt;em&gt;Rule 8：在RequestID中尽量编码更多的信息&lt;/em&gt;&lt;/h5&gt;&lt;p&gt;用RequestID将请求的处理流程关联起来：&lt;br&gt;在NOS性能测试中，之前存在的一个问题是，由于在打印错误堆栈的地方，并没有打印请求的RequestID，因此当一个请求出现错误时，很难（日志量太大）将该请求的错误堆栈和具体的请求关联起来。&lt;/p&gt;
&lt;p&gt;另一个问题是，NOS后端有视频服务器集群和图片处理服务器集群。因此我们可能会有以下需求：当用户视频截图失败时，用户会告诉我们请求的RequestID，由于NOS并没有将该RequestID转发到后端的图片处理服务器，因此无法利用该信息去查看视频处理服务器上的日志，而需要通过用户请求的URL进行查找。同时，由于我们无法知道该请求是在哪个具体的视频处理的worker上进行，进一步导致查找日志的困难。&lt;/p&gt;
&lt;p&gt;还有一个潜在的问题是：如果NOS将所有的日志收集起来（tomcat，图片处理集群，视频处理集群……），我们无法做到通过requestID来查找一个请求的处理流程。&lt;/p&gt;
&lt;h5 id=&quot;Rule-9：将一个请求的整个处理流程和唯一的requestID关联起来&quot;&gt;&lt;a href=&quot;#Rule-9：将一个请求的整个处理流程和唯一的requestID关联起来&quot; class=&quot;headerlink&quot; title=&quot;Rule 9：将一个请求的整个处理流程和唯一的requestID关联起来&quot;&gt;&lt;/a&gt;&lt;em&gt;Rule 9：将一个请求的整个处理流程和唯一的requestID关联起来&lt;/em&gt;&lt;/h5&gt;&lt;h3 id=&quot;9-关于线上机器的日志级别&quot;&gt;&lt;a href=&quot;#9-关于线上机器的日志级别&quot; class=&quot;headerlink&quot; title=&quot;9. 关于线上机器的日志级别&quot;&gt;&lt;/a&gt;9. 关于线上机器的日志级别&lt;/h3&gt;&lt;p&gt;问题描述：&lt;/p&gt;
&lt;p&gt;NOS的DEBUG日志非常详细的记录了请求处理相关信息，然而由于DEBUG日志量太大，因此通常线上只开INFO级别日志。然而INFO级别的日志却有可能导致部分问题无法定位。NOS线上一个请求可能随机地分发到4台机器进行处理，因此如果某一种错误在一段时间内多次出现，它也会在4台服务器上都出现。&lt;/p&gt;
&lt;p&gt;因此我们推荐的做法是，选择一台机器开启DEBUG级别的日志，方便定位问题。其实该做法背后的目的是，在线上任何问题的时候，都可以通过日志最快的找到问题的根源。&lt;/p&gt;
&lt;h5 id=&quot;Rule-10：让一台机器开启DEBUG日志&quot;&gt;&lt;a href=&quot;#Rule-10：让一台机器开启DEBUG日志&quot; class=&quot;headerlink&quot; title=&quot;Rule 10：让一台机器开启DEBUG日志&quot;&gt;&lt;/a&gt;&lt;em&gt;Rule 10：让一台机器开启DEBUG日志&lt;/em&gt;&lt;/h5&gt;&lt;h3 id=&quot;10-上线后的日志观察&quot;&gt;&lt;a href=&quot;#10-上线后的日志观察&quot; class=&quot;headerlink&quot; title=&quot;10. 上线后的日志观察&quot;&gt;&lt;/a&gt;10. 上线后的日志观察&lt;/h3&gt;&lt;p&gt;随着NOS开始服务越来越多的产品，NOS每次版本升级之后，通过对日志的观察来确定服务是否正常变得至关重要。同时在上线新功能时，来发人员需要通过观察一些特定的日志，来确定新功能是否工作正常。&lt;/p&gt;
&lt;p&gt;举例来说：&lt;/p&gt;
&lt;p&gt;NOS在实现了桶表缓存的功能之后，首先上线一台服务器，并对该功能是否工作正常进行观察。通过将桶缓存的所有操作（如插入，查找，过期删除等）以及桶缓存的状态（如缓存桶数量）都记录在DEBUG级别的日志中。将新上线的机器的日志级别调为DEBUG，并对桶缓存的相关操作是否正确，缓存桶数量等信息进行观察，确认一切正常之后再上线其他机器。&lt;/p&gt;
&lt;h5 id=&quot;Rule-11：新上线服务器后一定要对日志进行观察，特别地，开发人员可以通过观察日志来确认新功能是否工作正常&quot;&gt;&lt;a href=&quot;#Rule-11：新上线服务器后一定要对日志进行观察，特别地，开发人员可以通过观察日志来确认新功能是否工作正常&quot; class=&quot;headerlink&quot; title=&quot;Rule 11：新上线服务器后一定要对日志进行观察，特别地，开发人员可以通过观察日志来确认新功能是否工作正常&quot;&gt;&lt;/a&gt;&lt;em&gt;Rule 11：新上线服务器后一定要对日志进行观察，特别地，开发人员可以通过观察日志来确认新功能是否工作正常&lt;/em&gt;&lt;/h5&gt;&lt;h3 id=&quot;11-慢操作日志&quot;&gt;&lt;a href=&quot;#11-慢操作日志&quot; class=&quot;headerlink&quot; title=&quot;11. 慢操作日志&quot;&gt;&lt;/a&gt;11. 慢操作日志&lt;/h3&gt;&lt;p&gt;NOS在接收到一个请求的时候，会记录请求的接收时间（T1），在请求处理完成待发送的时候，会记录请求发送时间（T2），通常一个请求的日志都记为INFO级别，然而当出现请求处理时间（T2-T1）超过一定时间（如10s）时，会将该日志提升为WARN级别。通过该方法，可以预先发现系统可能存在的一些问题。&lt;/p&gt;
&lt;p&gt;同样的慢操作日志还可以用来记录系统一些外部依赖的处理时间，如NOS依赖外部认证服务器来进行认证。我们会记录每个请求的认证时间，如果认证时间超过某个值，也需要将该事件的日志级别进行提升，这样我们可以尽早发现认证服务器是不是需要扩容等问题。&lt;/p&gt;
&lt;p&gt;慢日志的时间阀值应该是可以动态调整的，这样在进行系统优化时，可以将该报警时间阀值逐渐调小，不断地对系统进行优化。&lt;/p&gt;
&lt;h5 id=&quot;Rule-12：通过日志级别的提升来发现潜在问题&quot;&gt;&lt;a href=&quot;#Rule-12：通过日志级别的提升来发现潜在问题&quot; class=&quot;headerlink&quot; title=&quot;Rule 12：通过日志级别的提升来发现潜在问题&quot;&gt;&lt;/a&gt;&lt;em&gt;Rule 12：通过日志级别的提升来发现潜在问题&lt;/em&gt;&lt;/h5&gt;&lt;h3 id=&quot;12-日志报警&quot;&gt;&lt;a href=&quot;#12-日志报警&quot; class=&quot;headerlink&quot; title=&quot;12. 日志报警&quot;&gt;&lt;/a&gt;12. 日志报警&lt;/h3&gt;&lt;p&gt;错误日志报警：&lt;/p&gt;
&lt;p&gt;NOS通过&lt;a href=&quot;https://m.hz.netease.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;运维平台&lt;/a&gt;设置了日志监控报警，周期性的（1分钟，5分钟）对服务器新产生的日志进行监控，如果发现错误数超过某个阀值，则进行报警。这类报警通常不一定是我们服务本身的问题，也有可能是用户使用NOS不当造成的。&lt;/p&gt;
&lt;p&gt;此处需要注意的问题是，日志报警相当于grep操作，如果日志量过大，或者匹配规则过多，可能对线上的服务产生影响。因此在设置好日志报警后，需要周期性的关注每次日志扫描的时间，评估日志监控是否对服务产生影响。&lt;/p&gt;
&lt;h5 id=&quot;Rule-13：对日志进行监控报警，比客户先发现系统问题&quot;&gt;&lt;a href=&quot;#Rule-13：对日志进行监控报警，比客户先发现系统问题&quot; class=&quot;headerlink&quot; title=&quot;Rule 13：对日志进行监控报警，比客户先发现系统问题&quot;&gt;&lt;/a&gt;&lt;em&gt;Rule 13：对日志进行监控报警，比客户先发现系统问题&lt;/em&gt;&lt;/h5&gt;&lt;p&gt;关键字报警：&lt;/p&gt;
&lt;p&gt;NOS为每个用户分配了一定量的存储配额，当用户容量超限时，会限制用户的上传操作。通过在日志中记录关键字，如“Quota Warning”等，可以及时提醒用户进行扩容，避免用户服务中断。&lt;/p&gt;
&lt;p&gt;类似的关键字报警还有很多：如对InternalError的数量进行监控，对缓存的桶数量进行监控等等。&lt;/p&gt;
&lt;h5 id=&quot;Rule-14：通过日志中的关键字来确定系统的运行状态&quot;&gt;&lt;a href=&quot;#Rule-14：通过日志中的关键字来确定系统的运行状态&quot; class=&quot;headerlink&quot; title=&quot;Rule 14：通过日志中的关键字来确定系统的运行状态&quot;&gt;&lt;/a&gt;&lt;em&gt;Rule 14：通过日志中的关键字来确定系统的运行状态&lt;/em&gt;&lt;/h5&gt;&lt;h3 id=&quot;13-关于日志格式&quot;&gt;&lt;a href=&quot;#13-关于日志格式&quot; class=&quot;headerlink&quot; title=&quot;13. 关于日志格式&quot;&gt;&lt;/a&gt;13. 关于日志格式&lt;/h3&gt;&lt;p&gt;日志格式一定要统一，不能任由开发人员的喜好来。举例来说，对于NOS视频截图超时的ERROR日志，有以下几种方式打印：&lt;/p&gt;
&lt;p&gt;第一种：&lt;br&gt;logger.error(“Gearman timeout exception for request ” + getRequestID() + ” value: ” + value, e);&lt;/p&gt;
&lt;p&gt;第二种：&lt;br&gt;logger.error(“RequestID: ” + getRequestID() + “, Error Message: Gearman timeout exception: ” + e);&lt;/p&gt;
&lt;p&gt;第三种：&lt;br&gt;logger.error(getErrorMessage(getRequestID(), getErrorMessage(), e));&lt;/p&gt;
&lt;p&gt;第一种方式打印日志即是开发人员按照自己的喜好来的，这种方法带来的问题是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;系统中日志格式不统一，不利于自动化处理&lt;/li&gt;
&lt;li&gt;有些日志可能只有开发人员自己才能看懂&lt;/li&gt;
&lt;li&gt;代码规范性不好&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而第三种方式，通过一个函数来规范日志格式，所有开发人员便可以通过该接口实现统一的日志。&lt;/p&gt;
&lt;h5 id=&quot;Rule-15：日志格式要统一规范&quot;&gt;&lt;a href=&quot;#Rule-15：日志格式要统一规范&quot; class=&quot;headerlink&quot; title=&quot;Rule 15：日志格式要统一规范&quot;&gt;&lt;/a&gt;&lt;em&gt;Rule 15：日志格式要统一规范&lt;/em&gt;&lt;/h5&gt;&lt;h3 id=&quot;14-错误日志输出到不同文件&quot;&gt;&lt;a href=&quot;#14-错误日志输出到不同文件&quot; class=&quot;headerlink&quot; title=&quot;14. 错误日志输出到不同文件&quot;&gt;&lt;/a&gt;14. 错误日志输出到不同文件&lt;/h3&gt;&lt;p&gt;在性能测试中遇到的另一个问题是，当并发量很大时，可能会有一些请求处理失败（如0.5%），为了对这些错误进行分析，需要去查这些错误请求的日志。而由于这种情况下并发量很大，使得对错误日志的分析变得困难。&lt;/p&gt;
&lt;p&gt;这种情况下可以将所有的错误日志同时输出到一个单独的文件之中。&lt;/p&gt;
&lt;h5 id=&quot;Rule-16：将错误日志输出到一个单独的文件中进行分析&quot;&gt;&lt;a href=&quot;#Rule-16：将错误日志输出到一个单独的文件中进行分析&quot; class=&quot;headerlink&quot; title=&quot;Rule 16：将错误日志输出到一个单独的文件中进行分析&quot;&gt;&lt;/a&gt;&lt;em&gt;Rule 16：将错误日志输出到一个单独的文件中进行分析&lt;/em&gt;&lt;/h5&gt;&lt;h3 id=&quot;15-关于日志文件大小&quot;&gt;&lt;a href=&quot;#15-关于日志文件大小&quot; class=&quot;headerlink&quot; title=&quot;15. 关于日志文件大小&quot;&gt;&lt;/a&gt;15. 关于日志文件大小&lt;/h3&gt;&lt;p&gt;日志文件不宜过大，过大的日志文件对于日志监控，问题定位等都会带来不便。因此需要进行日志文件的切分，日志文件的切分可以通过log4j等日志工具来配置，日志文件应该按天来分割，还是按照小时来分割，应该根据日志量来决定，原则就是方便开发或运维人员能快速查找日志。&lt;/p&gt;
&lt;p&gt;为了防止日志文件将整个磁盘空间占满，需要定期对日志文件进行删除。例如，在收到磁盘报警时，可以将两个月以前的日志文件删除。此处比较好的实践是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将所有日志文件收集起来，这样即使在记录日志的机器上删除，也可以通过收集的日志对之前的问题进行定位；&lt;/li&gt;
&lt;li&gt;每天通过定时任务来删除过期日志，如每天在凌晨4点删除60天前的日志&lt;/li&gt;
&lt;li&gt;log4j关于日志切分的相关配置，可以参考这篇文章。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;Rule-17：要把日志的大小，如何切分，如何删除等作为规范建立起来&quot;&gt;&lt;a href=&quot;#Rule-17：要把日志的大小，如何切分，如何删除等作为规范建立起来&quot; class=&quot;headerlink&quot; title=&quot;Rule 17：要把日志的大小，如何切分，如何删除等作为规范建立起来&quot;&gt;&lt;/a&gt;&lt;em&gt;Rule 17：要把日志的大小，如何切分，如何删除等作为规范建立起来&lt;/em&gt;&lt;/h5&gt;&lt;h2 id=&quot;经验汇总&quot;&gt;&lt;a href=&quot;#经验汇总&quot; class=&quot;headerlink&quot; title=&quot;经验汇总&quot;&gt;&lt;/a&gt;经验汇总&lt;/h2&gt;&lt;p&gt;此处对以上总结的所有经验进行汇总：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;整个团队（包括运维人员）需要对日志级别有明确的规定，什么日志记入什么级别的日志，什么级别的错误出现要如何处理等&lt;/li&gt;
&lt;li&gt;需要定期对日志内容进行优化更新，目的就是通过日志快速准确的定位问题&lt;/li&gt;
&lt;li&gt;要明确不同日志的用途，对日志内容进行分类&lt;/li&gt;
&lt;li&gt;绝不要打印没有用的日志，防止无用日志淹没重要信息&lt;/li&gt;
&lt;li&gt;日志信息要准确全面，努力做到仅凭日志就可以定位问题&lt;/li&gt;
&lt;li&gt;要以同样严格的要求对待测试程序的日志&lt;/li&gt;
&lt;li&gt;日志的优化是一件持续不断需要投入精力的事，需要不断从错误中学习&lt;/li&gt;
&lt;li&gt;在RequestID中尽量编码更多的信息&lt;/li&gt;
&lt;li&gt;将一个请求的整个处理流程和唯一的requestID关联起来&lt;/li&gt;
&lt;li&gt;让一台机器开启DEBUG日志&lt;/li&gt;
&lt;li&gt;新上线服务器后一定要对日志进行观察，特别地，开发人员可以通过观察日志来确认新功能是否工作正常&lt;/li&gt;
&lt;li&gt;通过日志级别的提升来发现潜在问题&lt;/li&gt;
&lt;li&gt;对日志进行监控报警，比客户先发现系统问题&lt;/li&gt;
&lt;li&gt;通过日志中的关键字来确定系统的运行状态&lt;/li&gt;
&lt;li&gt;日志格式要统一规范&lt;/li&gt;
&lt;li&gt;将错误日志输出到一个单独的文件中进行分析&lt;/li&gt;
&lt;li&gt;要把日志的大小，如何切分，如何删除等作为规范建立起来&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考文献&lt;/p&gt;
&lt;p&gt;[1]  “Optimal Logging” Anthony Vallone from Google&lt;a href=&quot;http://googletesting.blogspot.jp/2013/06/optimal-logging.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://googletesting.blogspot.jp/2013/06/optimal-logging.html&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;转自：&lt;a href=&quot;http://www.bitstech.net/2014/01/07/log-best-practice/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.bitstech.net/2014/01/07/log-best-practice/&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;日志用来记录用户操作、系统运行状态等，是一个系统的重要组成部分。然而由于日志并非系统核心功能，通常情况下并不受团队的重视。在出现问题需要通过
    
    </summary>
    
      <category term="linux" scheme="http://liaobin2016.github.io/categories/linux/"/>
    
    
      <category term="后台日志" scheme="http://liaobin2016.github.io/tags/%E5%90%8E%E5%8F%B0%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>hexo 使用记录</title>
    <link href="http://liaobin2016.github.io/2016/04/09/myblog/"/>
    <id>http://liaobin2016.github.io/2016/04/09/myblog/</id>
    <published>2016-04-09T06:27:53.161Z</published>
    <updated>2016-04-23T11:32:35.457Z</updated>
    
    <content type="html">&lt;pre&gt;&lt;code&gt;//修改配置后保存
npm install hexo-deployer-git --save
hexo g
hexo d

//创建一条博客
hexo new &amp;quot;my first blog&amp;quot;
hexo g
hexo d
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;##hexo主题更新&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;例如    
git clone https://github.com/hexojs/hexo-theme-light.git themes/light
修改根目录下的_config文件:
theme: light
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;主题下载：&lt;a href=&quot;https://github.com/hexojs/hexo/wiki/Themes&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/hexojs/hexo/wiki/Themes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##参考：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://hexo.io/docs/themes.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://hexo.io/docs/themes.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.itnose.net/detail/6231502.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.itnose.net/detail/6231502.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jianshu.com/p/05289a4bc8b2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.jianshu.com/p/05289a4bc8b2&lt;/a&gt; &lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;//修改配置后保存
npm install hexo-deployer-git --save
hexo g
hexo d

//创建一条博客
hexo new &amp;quot;my first blog&amp;quot;
hexo g
hexo d
&lt;/code&gt;&lt;/
    
    </summary>
    
      <category term="Hexo" scheme="http://liaobin2016.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://liaobin2016.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://liaobin2016.github.io/2016/04/09/hello-world/"/>
    <id>http://liaobin2016.github.io/2016/04/09/hello-world/</id>
    <published>2016-04-09T06:18:54.355Z</published>
    <updated>2016-04-23T11:34:17.298Z</updated>
    
    <content type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/server.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Server&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Generate-static-files&quot;&gt;&lt;a href=&quot;#Generate-static-files&quot; class=&quot;headerlink&quot; title=&quot;Generate static files&quot;&gt;&lt;/a&gt;Generate static files&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo generate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/generating.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Generating&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Deploy-to-remote-sites&quot;&gt;&lt;a href=&quot;#Deploy-to-remote-sites&quot; class=&quot;headerlink&quot; title=&quot;Deploy to remote sites&quot;&gt;&lt;/a&gt;Deploy to remote sites&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo deploy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/deployment.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Deployment&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
      <category term="Hexo" scheme="http://liaobin2016.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://liaobin2016.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
